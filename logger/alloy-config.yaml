server:
  http_listen_port: 12345
  grpc_listen_port: 0
  log_level: warn

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: docker

    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 10s

    # Optional: drop the logging stack itself to reduce noise
    # relabel_configs:
    #   - source_labels: [__meta_docker_container_name]
    #     regex: '/?(qoe-alloy|qoe-grafana|qoe-loki)'
    #     action: drop

    # Map Docker metadata -> labels and point to the container JSON log
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        regex: '/?(.*)'
        target_label: container
      - source_labels: [__meta_docker_container_image]
        target_label: image
      - source_labels: [__meta_docker_container_id]
        target_label: container_id
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: compose_service
      - source_labels: [__meta_docker_container_label_com_docker_compose_project]
        target_label: compose_project
      - source_labels: [__meta_docker_container_label_env]
        target_label: env
      - source_labels: [__meta_docker_container_label_stack]
        target_label: stack
      - source_labels:
          [__meta_docker_container_label_com_docker_compose_service, __meta_docker_container_name]
        separator: ';'
        regex: '(.+);(.+)'
        replacement: '$1'
        target_label: service
      - source_labels: [__meta_docker_container_id]
        target_label: __path__
        replacement: /var/lib/docker/containers/$1/$1-json.log

    pipeline_stages:
      # Merge multi-line stack traces / exceptions
      - multiline:
          firstline: '^(?:\{|\d{4}-\d{2}-\d{2}T|\d{2}:\d{2}:\d{2})'
          max_wait_time: 2s

      # Unwrap Docker JSON (adds "message", "stream", etc.)
      - docker: {}

      # Try to parse inner application log as JSON (quiet if not JSON)
      - json:
          expressions:
            time: time
            level: level
            severity: severity
            msg: msg
            message: message
            method: method
            path: path
            status: status
            duration: duration
            request_id: request_id
          optional: true

      # HTTP method/path and status extraction (best-effort; quiet if not present)
      - regex:
          expression: '"(?P<method>GET|POST|PUT|DELETE|PATCH|OPTIONS) (?P<path>[^ ]+) HTTP/[0-9.]+"'
          source: message
          optional: true

      - regex:
          expression: '(?P<status>[1-5][0-9]{2})'
          source: message
          optional: true

      # Promote useful fields to labels
      - labels:
          level:
          severity:
          compose_service:
          compose_project:
          image:
          container:
          container_id:
          service:
          env:
          stack:
          method:
          path:
          status:
          request_id:

      # Severity normalization
      - match:
          selector: '{stream="stderr"}'
          stages:
            - labels:
                severity: error

      - match:
          selector: '{status=~"5.."}'
          stages:
            - labels:
                severity: error

      - match:
          selector: '{status=~"4.."}'
          stages:
            - labels:
                severity: warn

      - match:
          selector: '{level=~"(?i)error|err|fatal|critical"}'
          stages:
            - labels:
                severity: error
