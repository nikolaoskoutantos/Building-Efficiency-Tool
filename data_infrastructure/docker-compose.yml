# QoE Platform - Complete Infrastructure
version: '3.8'

services:
  # IPFS Node
  ipfs:
    image: ipfs/kubo:v0.24.0
    container_name: qoe-ipfs
    ports:
      - "5001:5001"  # IPFS API
      - "8080:8080"  # IPFS Gateway
      - "4001:4001"  # IPFS Swarm
    volumes:
      - ipfs_data:/data/ipfs
    environment:
      - IPFS_PROFILE=server
    command: |
      sh -c "
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"POST\", \"GET\"]' &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Headers '[\"Content-Type\"]' &&
        ipfs daemon --migrate=true
      "
    restart: unless-stopped
    networks:
      - qoe-network
    env_file:
      - .env

  caddy:
    image: caddy:2-alpine
    container_name: qoe-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    networks:
      - qoe-network
    depends_on:
      - ipfs
      - vault
  # HashiCorp Vault
  vault:
    image: hashicorp/vault:latest
    container_name: qoe-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "qoe-dev-token-2025"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_UI: "true"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./vault-config:/vault/config:ro
    command: ["vault", "server", "-dev", "-dev-listen-address=0.0.0.0:8200"]
    restart: unless-stopped
    networks:
      - qoe-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env

volumes:
  ipfs_data:
  caddy_data:
  caddy_config:
  vault_data:
  
networks:
  qoe-network:
    driver: bridge